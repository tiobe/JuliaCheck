
>> Processing file 'test/too_many_types_in_unions.jl'...

test/too_many_types_in_unions.jl(4, 7):
const ReturnTypes = Union{Nothing, String, Int32, Int64, Float64}
#     └─────────┘ ── Avoid global variables wherever possible.
Avoid global variables when possible.
Rule: asml-avoid-global-variables. Severity: 3

test/too_many_types_in_unions.jl(4, 7):
const ReturnTypes = Union{Nothing, String, Int32, Int64, Float64}
#     └─────────┘ ── Variable ReturnTypes should be written in UPPER_SNAKE_CASE.
Casing of globals.
Rule: asml-global-variables-upper-snake-case. Severity: 3

test/too_many_types_in_unions.jl(4, 21):
const ReturnTypes = Union{Nothing, String, Int32, Int64, Float64}
#                   └───────────────────────────────────────────┘ ── Union has too many types.
Too many types in Unions.
Rule: asml-too-many-types-in-unions. Severity: 6

test/too_many_types_in_unions.jl(7, 7):
const Empty = Union{}
#     └───┘ ── Avoid global variables wherever possible.
Avoid global variables when possible.
Rule: asml-avoid-global-variables. Severity: 3

test/too_many_types_in_unions.jl(7, 7):
const Empty = Union{}
#     └───┘ ── Variable Empty should be written in UPPER_SNAKE_CASE.
Casing of globals.
Rule: asml-global-variables-upper-snake-case. Severity: 3

test/too_many_types_in_unions.jl(10, 12):
NonConst = Union{Nothing, Bool}     # fails other test, but OK here
#          └──────────────────┘ ── Declare this Union as a const type before using it.
Implement Unions as const.
Rule: asml-implement-unions-as-consts. Severity: 3

test/too_many_types_in_unions.jl(12, 7):
const MaybeString = Union{Nothing, String}
#     └─────────┘ ── Avoid global variables wherever possible.
Avoid global variables when possible.
Rule: asml-avoid-global-variables. Severity: 3

test/too_many_types_in_unions.jl(12, 7):
const MaybeString = Union{Nothing, String}
#     └─────────┘ ── Variable MaybeString should be written in UPPER_SNAKE_CASE.
Casing of globals.
Rule: asml-global-variables-upper-snake-case. Severity: 3

test/too_many_types_in_unions.jl(14, 7):
const Threesome = Union{Nothing, String, Int64}
#     └───────┘ ── Avoid global variables wherever possible.
Avoid global variables when possible.
Rule: asml-avoid-global-variables. Severity: 3

test/too_many_types_in_unions.jl(14, 7):
const Threesome = Union{Nothing, String, Int64}
#     └───────┘ ── Variable Threesome should be written in UPPER_SNAKE_CASE.
Casing of globals.
Rule: asml-global-variables-upper-snake-case. Severity: 3

test/too_many_types_in_unions.jl(16, 7):
const FourForU = Union{Nothing, String, Int64, Float64}
#     └──────┘ ── Avoid global variables wherever possible.
Avoid global variables when possible.
Rule: asml-avoid-global-variables. Severity: 3

test/too_many_types_in_unions.jl(16, 7):
const FourForU = Union{Nothing, String, Int64, Float64}
#     └──────┘ ── Variable FourForU should be written in UPPER_SNAKE_CASE.
Casing of globals.
Rule: asml-global-variables-upper-snake-case. Severity: 3

