module DoNotChangeGeneratedIndices

import JuliaSyntax: SyntaxNode, @K_str, kind, numchildren
using ...Checks: is_enabled
using ...Properties: children, first_child, get_assignee, get_iteration_parts,
                     is_assignment, is_flow_cntrl, is_range, report_violation

const SEVERITY = 5
const RULE_ID = "do-not-change-generated-indices"
const SUMMARY = "Do not change indices generated by Julia."
const USER_MSG = "Do not change generated indices."

function check(for_loop::SyntaxNode)
    if !is_enabled(RULE_ID) return nothing end

    @assert kind(for_loop) == K"for" "Expected a [for] node, got $(kind(for_loop))."

    loop_var, iter_expr = get_iteration_parts(for_loop)
    if isnothing(loop_var) || isnothing(iter_expr)
        return nothing
    end
    var_name = loop_var_to_string(loop_var)
    if is_range(iter_expr) || (
        kind(iter_expr) == K"call" &&
        kind(first_child(iter_expr)) == K"Identifier" &&
        string(first_child(iter_expr)) âˆˆ ["eachindex", "enumerate", "axes"]
       )
        # Look into the loop's body to see if `loop_var` is modified.
        @assert numchildren(for_loop) == 2 &&
                kind(children(for_loop)[2]) == K"block" "An empty loop or what? $for_loop"
        body = children(for_loop)[2]
        frisk_for_modification(body, var_name)
    end
end

function loop_var_to_string(var::SyntaxNode)
    x = var
    if kind(x) == K"tuple" x = first_child(x) end
    if kind(x) == K"Identifier" return string(x) end
    @debug "Can't find identifier in loop variable" var
    return ""
end

function frisk_for_modification(body::SyntaxNode, var_name::String)::Nothing
    for expr in children(body)
        if is_assignment(expr)
            lhs_node, lhs_str = get_assignee(expr)
            if lhs_str == var_name
                report_violation(lhs_node;
                        severity = SEVERITY, rule_id = RULE_ID,
                        user_msg = USER_MSG, summary = SUMMARY)
            end

        elseif is_flow_cntrl(expr)
            next_victim = findfirst(x -> kind(x) == K"block", children(expr))
            if ! isnothing(next_victim)
                frisk_for_modification(children(expr)[next_victim], var_name)
            end
        end
    end
end

end
